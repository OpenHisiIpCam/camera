#!/usr/bin/env python3

__copyright__ = """MIT License

Copyright (c) 2021 OpenHisiIpCam, info@openhisiipcam.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
__license__ = "MIT"
__version__ = "0.0.2"

import argparse
import os
import sys
import re

# root_dir = os.getcwd()

files = []
configs = {}
header = """# This file was generated by merge_config_plus.py
# Files include structure (relevant to root directory):
"""

CONF_NAME = "BR2_"

re_config_setup = re.compile("^\s*(" + CONF_NAME + "\w+)=(?!\+)(.+)$")
re_value_dec = re.compile("^[0-9]+$")
re_value_hex = re.compile("^0x[a-fA-F0-9]+$")
re_value_bool = re.compile("^y$")
re_value_str = re.compile('^"(.*)"$')
re_config_unsetup = re.compile("^#\s(" + CONF_NAME + "\w+) is not set\s*$")
re_config_concat_right = re.compile("^\s*(" + CONF_NAME + '\w+)\s*\+=\s*"(.+)"\s*$')
re_config_concat_left = re.compile("^\s*(" + CONF_NAME + '\w+)\s*=\+\s*"(.+)"\s*$')
re_config_remove_substr = re.compile("^\s*(" + CONF_NAME + '\w+)\s*-=\s*"(.+)"\s*$')
re_include = re.compile('^\s*include\s*"(.*)"\s*$')
re_comment = re.compile("^#.*$")


def replace_vars(line):
    return line.replace("$(ROOT)", root_dir)


def process_file(file, path, level=0):
    global header

    curpath = os.path.dirname(os.path.abspath(file.name))
    print("curpath", curpath)

    if os.path.abspath(file.name) in files:
        print("Dup file!")
        # TODO exception
        exit()
    else:
        header += (
            "#"
            + "  " * level
            + " * '"
            + (os.path.relpath(file.name, start=args.root))
            + "'\n"
        )
        files.append(os.path.abspath(file.name))

    lines = file.readlines()
    count = 0
    for line in lines:
        count += 1
        line = replace_vars(line.strip())
        print(line)
        if re_config_setup.fullmatch(line.strip()):
            print("SETUP")
            if (
                configs.get(re_config_setup.fullmatch(line.strip()).group(1), None)
                == None
            ):
                configs[re_config_setup.fullmatch(line.strip()).group(1)] = []

            # print("====", re_config_setup.fullmatch(line.strip()).group(2))
            if re_value_str.fullmatch(re_config_setup.fullmatch(line.strip()).group(2)):
                configs[re_config_setup.fullmatch(line.strip()).group(1)].append(
                    {
                        "value": re_value_str.fullmatch(
                            re_config_setup.fullmatch(line.strip()).group(2)
                        ).group(1),
                        "file": file.name,
                        "line": count,
                    }
                )

            else:
                configs[re_config_setup.fullmatch(line.strip()).group(1)].append(
                    {
                        "value": True,
                        "file": file.name,
                        "line": count,
                    }
                )

        elif re_config_unsetup.fullmatch(line.strip()):
            print("UNSETUP")
            if (
                configs.get(re_config_unsetup.fullmatch(line.strip()).group(1), None)
                == None
            ):
                configs[re_config_unsetup.fullmatch(line.strip()).group(1)] = []

            configs[re_config_unsetup.fullmatch(line.strip()).group(1)].append(
                {"value": None, "file": file.name, "line": count}
            )

        elif re_config_concat_left.fullmatch(line.strip()):
            print("CONCAT LEFT")

            if (
                configs.get(
                    re_config_concat_left.fullmatch(line.strip()).group(1), None
                )
                == None
            ):
                configs[re_config_concat_left.fullmatch(line.strip()).group(1)] = [
                    {
                        "value": re_config_concat_left.fullmatch(line.strip()).group(2),
                        "file": file.name,
                        "line": count,
                    }
                ]
            else:
                if not isinstance(
                    configs[re_config_concat_left.fullmatch(line.strip()).group(1)][-1][
                        "value"
                    ],
                    str,
                ):
                    print("ERROR!")
                    exit(1)

                newv = (
                    re_config_concat_left.fullmatch(line.strip()).group(2)
                    + configs[re_config_concat_left.fullmatch(line.strip()).group(1)][
                        -1
                    ]["value"]
                )
                configs[re_config_concat_left.fullmatch(line.strip()).group(1)].append(
                    {"value": newv, "file": file.name, "line": count}
                )
        elif re_config_remove_substr.fullmatch(line.strip()):
            print("REMOVE SUBSTR")
            if (
                configs.get(
                    re_config_remove_substr.fullmatch(line.strip()).group(1), None
                )
                != None
            ):
                if not isinstance(
                    configs[re_config_remove_substr.fullmatch(line.strip()).group(1)][
                        -1
                    ]["value"],
                    str,
                ):
                    print("ERROR!")
                    exit(1)

                newv = configs[
                    re_config_remove_substr.fullmatch(line.strip()).group(1)
                ][-1]["value"].replace(
                    re_config_remove_substr.fullmatch(line.strip()).group(2), ""
                )

                configs[
                    re_config_remove_substr.fullmatch(line.strip()).group(1)
                ].append({"value": newv, "file": file.name, "line": count})

        elif re_config_concat_right.fullmatch(line.strip()):
            print("CONCAT RIGHT")
            if (
                configs.get(
                    re_config_concat_right.fullmatch(line.strip()).group(1), None
                )
                == None
            ):
                configs[re_config_concat_right.fullmatch(line.strip()).group(1)] = [
                    {
                        "value": re_config_concat_right.fullmatch(line.strip()).group(
                            2
                        ),
                        "file": file.name,
                        "line": count,
                    }
                ]
            else:
                if not isinstance(
                    configs[re_config_concat_right.fullmatch(line.strip()).group(1)][
                        -1
                    ]["value"],
                    str,
                ):
                    print("ERROR!")
                    exit(1)

                newv = configs[re_config_concat_right.fullmatch(line.strip()).group(1)][
                    -1
                ]["value"] + re_config_concat_right.fullmatch(line.strip()).group(2)
                configs[re_config_concat_right.fullmatch(line.strip()).group(1)].append(
                    {"value": newv, "file": file.name, "line": count}
                )

        elif re_include.fullmatch(line.strip()):
            print("INCLUDE ")
            include = re_include.fullmatch(line.strip()).group(1)

            if include[0] != "/":
                include = curpath + "/" + include

            print("include file", include)

            process_file(
                open(include, "r"),
                curpath,
                level + 1,
            )
        elif re_comment.fullmatch(line.strip()):
            print("COMMENT")
            # print ("-1:", configs[-1])
        elif line.strip() == "":
            print("EMPTY")
        else:
            print("UNKNOWN")
            exit(1)


# def process_config_item(item, [setup, unsetup, change])
def print_configs(configs, out=sys.stdout):
    print("OUT", out)
    for key in configs:
        if not args.disable_history:
            for i in range(len(configs[key]) - 1):
                if configs[key][i]["value"] == None:
                    print(
                        "# Previously "
                        + key
                        + " is not set in '"
                        + (os.path.relpath(configs[key][i]["file"], start=args.root))
                        + "':"
                        + str(configs[key][i]["line"]),
                        file=out,
                    )
                elif configs[key][i]["value"] == True:
                    print(
                        "# Previously "
                        + key
                        + "=y in '"
                        + (os.path.relpath(configs[key][i]["file"], start=args.root))
                        + "':"
                        + str(configs[key][i]["line"]),
                        file=out,
                    )
                elif isinstance(configs[key][i]["value"], str):
                    print(
                        "# Previously "
                        + key
                        + "='"
                        + configs[key][i]["value"]
                        + "' in '"
                        + (os.path.relpath(configs[key][i]["file"], start=args.root))
                        + "':"
                        + str(configs[key][i]["line"]),
                        file=out,
                    )
                elif isinstance(configs[key][i]["value"], int):
                    print(
                        "# Previously "
                        + key
                        + "="
                        + str(configs[key][i]["value"])
                        + " in '"
                        + (os.path.relpath(configs[key][i]["file"], start=args.root))
                        + "':"
                        + str(configs[key][i]["line"]),
                        file=out,
                    )
                else:
                    print("ERROR", file=out)
                    exit(1)

        # final value
        if configs[key][-1]["value"] == None:
            print("# " + key + " is not set", file=out)
        elif configs[key][-1]["value"] == True:
            print(key + "=y", file=out)
        elif isinstance(configs[key][-1]["value"], str):
            outline = configs[key][-1]["value"]
            if args.strip_strings:
                outline = outline.strip()
                print("outline ", outline)
            if outline != "":
                print(key + '="' + outline + '"', file=out)
            else:
                print("# " + key + " is empty string, suppressed", file=out)
        elif isinstance(configs[key][-1]["value"], int):
            print(key + "=" + str(configs[key][-1]["value"], file=out))
        else:
            print("ERROR", file=out)
            exit(1)


parser = argparse.ArgumentParser(
    description="Kconfig defconfig preprocessor.",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument("-v", "--verbose", action="store_true", help="Print debug output")
parser.add_argument(
    "--version",
    action="version",
    version="%(prog)s {version}".format(version=__version__),
)
parser.add_argument(
    "-r", "--root", type=str, default=os.path.abspath(os.curdir), help="Root directory"
)
parser.add_argument(
    "-o", "--output", type=argparse.FileType("w"), default="-", help="Output to file"
)
parser.add_argument(
    "--strip-strings", action="store_true", help="Strip final string values"
)
parser.add_argument(
    "--disable-history",
    action="store_true",
    help="Remove var values history from output",
)
parser.add_argument(
    "files", metavar="F", type=argparse.FileType("r"), nargs="+", help="Files list"
)

args = parser.parse_args()

root_dir = args.root

# print(os.getcwd())

# if

print(args)

for file in args.files:
    process_file(file, os.path.dirname(os.path.abspath(file.name)))

print(files)

print(configs)

print("----------------------------------")

print(header, file=args.output)
print_configs(configs, args.output)
